module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Aggregatelink {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type link {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
}

type linkConnection {
  pageInfo: PageInfo!
  edges: [linkEdge]!
  aggregate: Aggregatelink!
}

input linkCreateInput {
  id: ID
  description: String!
  url: String!
}

type linkEdge {
  node: link!
  cursor: String!
}

enum linkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
}

type linkPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
}

type linkSubscriptionPayload {
  mutation: MutationType!
  node: link
  updatedFields: [String!]
  previousValues: linkPreviousValues
}

input linkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: linkWhereInput
  AND: [linkSubscriptionWhereInput!]
  OR: [linkSubscriptionWhereInput!]
  NOT: [linkSubscriptionWhereInput!]
}

input linkUpdateInput {
  description: String
  url: String
}

input linkUpdateManyMutationInput {
  description: String
  url: String
}

input linkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  AND: [linkWhereInput!]
  OR: [linkWhereInput!]
  NOT: [linkWhereInput!]
}

input linkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createlink(data: linkCreateInput!): link!
  updatelink(data: linkUpdateInput!, where: linkWhereUniqueInput!): link
  updateManylinks(data: linkUpdateManyMutationInput!, where: linkWhereInput): BatchPayload!
  upsertlink(where: linkWhereUniqueInput!, create: linkCreateInput!, update: linkUpdateInput!): link!
  deletelink(where: linkWhereUniqueInput!): link
  deleteManylinks(where: linkWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  link(where: linkWhereUniqueInput!): link
  links(where: linkWhereInput, orderBy: linkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [link]!
  linksConnection(where: linkWhereInput, orderBy: linkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): linkConnection!
  node(id: ID!): Node
}

type Subscription {
  link(where: linkSubscriptionWhereInput): linkSubscriptionPayload
}
`
      }
    